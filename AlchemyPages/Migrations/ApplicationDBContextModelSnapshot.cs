// <auto-generated />
using System;
using AlchemyPages.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlchemyPages.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlchemyPages.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Element")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFileLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qualityOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qualityThree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qualityTwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("AlchemyPages.Models.IngredientEncounter", b =>
                {
                    b.Property<int>("IngredientEncounterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientEncounterID"));

                    b.Property<DateTime>("EncounterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("ingredientID")
                        .HasColumnType("int");

                    b.HasKey("IngredientEncounterID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("ingredientID");

                    b.ToTable("IngredientEncounters");
                });

            modelBuilder.Entity("AlchemyPages.Models.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("AlchemyPages.Models.PlayerKnowledge", b =>
                {
                    b.Property<int>("PlayerKnowledgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerKnowledgeID"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("QualitiesKnown")
                        .HasColumnType("int");

                    b.HasKey("PlayerKnowledgeID");

                    b.HasIndex("IngredientId");

                    b.HasIndex("PlayerID", "IngredientId")
                        .IsUnique();

                    b.ToTable("PlayerKnowledges");
                });

            modelBuilder.Entity("AlchemyPages.Models.IngredientEncounter", b =>
                {
                    b.HasOne("AlchemyPages.Models.Player", "Player")
                        .WithMany("IngredientEncounters")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlchemyPages.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientEncounters")
                        .HasForeignKey("ingredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AlchemyPages.Models.PlayerKnowledge", b =>
                {
                    b.HasOne("AlchemyPages.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlchemyPages.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AlchemyPages.Models.Ingredient", b =>
                {
                    b.Navigation("IngredientEncounters");
                });

            modelBuilder.Entity("AlchemyPages.Models.Player", b =>
                {
                    b.Navigation("IngredientEncounters");
                });
#pragma warning restore 612, 618
        }
    }
}
